Mobexler - Operating system for hacking mobile apps - https://www.mobexler.com/
open source , Built on Linux distribution that is Ubuntu. 
OVA file in Virutalbox or VMWare
Default username:Mobexler , Password:12345

Tools in Mobexler:
Androidzone PT Tools:
Terminal Emulator
Android studio
Burpsuite
MobSF
jadx
ghidra
Grapefruit
RMS(Runtime Mobile Security)
SQLite
Frida
Mara Framework

IOSzone PT Tools:
Cydia Impacter
fillzilla
Iblessing
Objection

Emulators:
Android emulators are programs that replicate the hardware of an android device
so you can android apps on other OS.it duplicates the software & Hardware Features 
(android studio emulators,NOXPLAYER,Blue stacks)
https://www.genymotion.com/

Genymotion - android emulator , Includes all sensors,requires Virtualbox,supports only windows ,also build support for MAC.
MAC user android 11 only will work , windows free to choose (google nexus 5)
To Install the apps click on OpenGapps

Android studio Emulator requires android studio , Fastest & smoothest , supports windows & MAC.
download from android studio website

NOX Player emulator - android emulator
bignox.com , android 7 will be used

Android Rooting:
Root access to the system,modify the software code
getting the super user (su) access , similar to obtaining root in linux.
xda-developers.com for rooting the phone.
https://xdaforums.com/t/how-to-root-any-android-device-part-1.4416967/
Magisk_PATCHED.tar

Setting up Proxy in Android:
android device --> proxy server ---> burpsuite

ifconfig ---> ipaddress ---> configure in proxy of burpsuite --> download CA cert in mobile 
device.

Installing your first application - DIVA
Damn insecure vulnerable application 
intentionallt insecure application like DVWA

DIVA-ANDROID LAB SETUP

https://github.com/0xArab/diva-apk-file - 13 Objectives you need to accomplish


Introduction to android applications
*Native Applications: Developed for a particular OS or Plarform
example:java & kotlin - android apps , swift - IOS apps
*Web-Based app : browser-based app & generally use webview (a system component in android)
to display web pages on android OS.(using web view)
*Hybrid app - combination of the above apps , it requires an emulator for testing (Real World).
(flutter & React Native apps developed) - progressive web apps


Android Architecture stack:

applications - home,contacts,camera ---> includes all 3rd party apps
applications framework - package manager,activity manager,view system (managers & framework libaries)
---> classes creation of android apps
android runtime - Dalvik VM (high level(user readable to bytecode) - similar to java VM , Zygote , Core libraries
platform libraries - media,graphics,sqlite,openGL (2d or3d),SSL(internet connectivity)
linux kernal -ALL drivers (wifi,bluetooth,camera,display,USB) --->security,memory,process managements

Android components:
*Activities - perfoems actions on the screen (battery low)
*Broadcast recievers - broadcast messages from different apps (camera app in low battery)
*services - runs in the background to perform long-running operations
*content providers - supplies data (share or move the data)

Android file system: (like linux filr system) (version of linux)
boot 
sysytem - users folder
recovery - backup files
data - data/data u will find all the apps installed
cache
misc -  bin,sbin,temp
sdcard

$ADB Shell ---> in command line
in real test boot folder is visible , but isn't visible in emulator.runs when the system starts

ANDROID DATA STORAGE OPTIONS:
*shared preferences:used to store the data in key value pairs (non sensitive data)
*sqlite - store private data fo the app
*file sorage  - store raw files on memory card or SD card
*content providers - semi-structured data with user config data access
*cloud storage - used to store third party data storage , involves Parse api keys (firebase , mysql etc)

Transferring files between android & PC:

Android and host using ADB
ADB stands for Android Debugger
the following commands can be used on host machine using

in windows machine:
adb pull <path to file> <destination path>

Extracting applications using APK Extractor (static Analysis)

Download the apk on your device and apk extractor from play store
send the file to your PC

*Decompliling the application using dex-2jar (apk file are zip version of the source code)

unzip the apk file using winrar
you will be able to view the dex code
use dex2jar to convert the dex code to jar file
use jd-gui to view the JAR file

.dex--->dex2jar--->.jar (jd-gui) to view the jar file (java based source code file viewer)

https://github.com/pxb1988/dex2jar
https://github.com/java-decompiler/jd-gui

Decompiling the application jadx-gui

jadx-gui is a free open source APK decomplier tool
simply open the application using jadx-gui
you will be able to view the entire source code

https://github.com/skylot/jadx
https://github.com/0xArab/diva-apk-file

Android Basics:

apk file is a zipped java source code or kotlin code

classes ---> another form of a source code it is called as dex code
dex2jar --> dex to jar
jd-gui ---> decompiling this jar file gives you the java source code

apk --> unpack ---> classes.dex ---> classes.jar ---> java source code

apk --> decode (removing the signature & getting smali code) ---> smali code ---> jar file














